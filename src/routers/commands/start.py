from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import Proxy, Channel, Account

start_router = Router()


@start_router.message(CommandStart())
@start_router.callback_query(F.data == 'start')
async def start_command(event: Message | CallbackQuery):
    builder = InlineKeyboardBuilder()

    builder.button(text='ü•á –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤', callback_data='sources')
    builder.button(text='üåê –ü—Ä–æ–∫—Å–∏', callback_data='proxies')
    builder.button(text='üë• –ê–∫–∫–∞—É–Ω—Ç—ã', callback_data='accounts')
    builder.button(text='‚õèÔ∏è –ö —Ä–∞–±–æ—Ç–µ', callback_data='job')

    builder.adjust(1, 2, 1)

    channels_count = await Channel.count()
    proxies_count = await Proxy.count()
    accounts_count = await Account.count()

    kwargs = {
        'text': (
            '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!</b>\n'
            '\n'
            f'–ö–∞–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: <code>{channels_count}</code>\n'
            f'–ü—Ä–æ–∫—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: <code>{proxies_count}</code>\n'
            f'–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: <code>{accounts_count}</code>'
        ),
        'reply_markup': builder.as_markup()
    }

    if isinstance(event, Message):
        await event.reply(**kwargs)
    elif isinstance(event, CallbackQuery):
        await event.message.edit_text(**kwargs)
