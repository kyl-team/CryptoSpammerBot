import re

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from beanie import PydanticObjectId

from database import Proxy

detailed_router = Router()


@detailed_router.callback_query(F.data.regexp(re.compile(r'^proxies_([a-f0-9]{24})(_([a-z]+))?$')).as_('match'))
async def detailed_proxy(query: CallbackQuery, match: re.Match[str]):
    proxy_id, action = match.group(1, 3)
    proxy = await Proxy.find_one(Proxy.id == PydanticObjectId(proxy_id))
    if not proxy:
        return await query.answer('‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', show_alert=True)

    builder = InlineKeyboardBuilder()

    if action == 'delete':
        await proxy.delete()

        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='proxies')

        return await query.message.edit_text(f'‚úÖ –ü—Ä–æ–∫—Å–∏ <code>{proxy}</code> —É–¥–∞–ª–µ–Ω–æ')
    elif action == 'check':
        if await proxy.check_connection():
            return await query.answer('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        else:
            return await query.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', show_alert=True)

    builder.button(text='üîÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', callback_data=f'proxies_{proxy.id}_check')
    builder.button(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f'proxies_{proxy.id}_delete')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'proxies')

    builder.adjust(2, 1)

    auth_text = f'–ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {"–¥–∞" if proxy.require_auth else "–Ω–µ—Ç"}\n'
    if proxy.require_auth:
        auth_text += f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{proxy.username}</code>\n'
        auth_text += f'–ü–∞—Ä–æ–ª—å: <tg-spoiler>{proxy.password}</tg-spoiler>\n'

    await query.message.edit_text(f'<b>–ü—Ä–æ–∫—Å–∏ <code>{proxy.id}</code></b>\n'
                                  f'\n'
                                  f'–•–æ—Å—Ç: <code>{proxy.hostname}</code>\n'
                                  f'–ü–æ—Ä—Ç: <code>{proxy.port}</code>\n'
                                  f'\n'
                                  f'{auth_text}'
                                  f'\n'
                                  f'–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: <tg-spoiler><b>{proxy}</b></tg-spoiler>\n',
                                  reply_markup=builder.as_markup())
