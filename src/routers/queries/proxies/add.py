import re

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import Proxy
from database.proxy import proxy_pattern
from routers.queries.state_clear import get_state_clear_markup

add_router = Router()


class AddProxy(StatesGroup):
    url = State()


@add_router.callback_query(F.data == 'proxies_add')
async def add_proxy(query: CallbackQuery, state: FSMContext):
    await state.set_state(AddProxy.url)
    await query.message.edit_text('<b>–í–≤–µ–¥–∏—Ç–µ URL HTTP –ø—Ä–æ–∫—Å–∏</b>', reply_markup=get_state_clear_markup())


@add_router.message(StateFilter(AddProxy.url), F.text.regexp(proxy_pattern).as_('match'))
async def on_url_proxy(message: Message, match: re.Match[str]):
    status_message = await message.reply('‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')

    proxy = Proxy.from_match(match)

    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start')
    builder.button(text='üîô –í —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å—è–º–∏', callback_data='proxies')
    builder.adjust(2)

    if await proxy.check_connection():
        await proxy.insert()

        await status_message.edit_text('‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', reply_markup=builder.as_markup())
    else:
        await status_message.edit_text(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–∫—Å–∏.\n'
            '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=builder.as_markup())
