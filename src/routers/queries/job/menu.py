import re

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core import job
from database import Account
from ..state_clear import get_state_clear_markup


class JobMessageStates(StatesGroup):
    edit = State()


menu_router = Router()


@menu_router.callback_query(F.data.regexp(re.compile(r'^job(_([a-z]+))?$')).as_('match'))
async def menu(query: CallbackQuery, state: FSMContext, match: re.Match[str]):
    action = match.group(2)

    match action:
        case 'similar':
            job.storage.similar = not job.storage.similar
            await job.storage.save()
        case 'draft':
            job.storage.draft = not job.storage.draft
            await job.storage.save()
        case 'edit':
            await state.set_state(JobMessageStates.edit)
            return await query.message.edit_text('<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–µ—Å–µ–¥</b>',
                                                 reply_markup=get_state_clear_markup())
        case 'start':
            return await job.start(query.from_user.id)

    builder = InlineKeyboardBuilder()

    warnings = ''

    if len(job.storage.message.text) > 0:
        builder.button(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='job_edit')
    else:
        builder.button(text='‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='job_edit')

    if job.storage.similar:
        builder.button(text='–ò—Å–∫–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ ‚úÖ', callback_data='job_similar')
    else:
        builder.button(text='–ò—Å–∫–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ ‚ùå', callback_data='job_similar')
    if job.storage.draft:
        builder.button(text='–¢–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö üìÑ', callback_data='job_draft')
    else:
        builder.button(text='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ‚úçÔ∏è', callback_data='job_draft')

        if len(job.storage.message.text) == 0:
            warnings += '‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ–∂–∏–º, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n'
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='start')

    accounts = await Account.count()

    if accounts == 0:
        warnings += '‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ—Å–∫–æ–ª—å–∫—É –≤ –±–æ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤!\n'

    if len(warnings) == 0:
        builder.button(text='üöÄ –ó–∞–ø—É—Å–∫', callback_data='job_start')

    builder.adjust(1, 2, 2)

    await query.message.edit_text('<b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n'
                                  f'{warnings}', reply_markup=builder.as_markup())


@menu_router.message(StateFilter(JobMessageStates.edit), F.text)
async def edit_message(message: Message):
    job.storage.message.text = message.text
    await job.storage.save()

    builder = InlineKeyboardBuilder()

    builder.button(text='üîô –ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–ø—É—Å–∫–∞', callback_data='job')
    builder.button(text='üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start')

    builder.adjust(1, 1)

    await message.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=builder.as_markup())
