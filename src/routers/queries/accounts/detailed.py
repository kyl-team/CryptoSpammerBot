import re

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pyrofork.errors import RPCError

from core.accounts import get_client
from database import Account

detailed_router = Router()


@detailed_router.callback_query(F.data.regexp(re.compile(r'^accounts_(\d+)(_(delete))?$')).as_('match'))
async def get_detailed_account(query: CallbackQuery, match: re.Match[str]):
    user_id, action = match.group(1, 3)
    account = await Account.find_one(Account.user_id == int(user_id))
    if not account:
        return await query.answer('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)

    builder = InlineKeyboardBuilder()
    builder.button(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f'accounts_{account.user_id}_delete')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='accounts')
    builder.adjust(1, 1)

    if action == 'delete':
        await account.delete()
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='accounts')
        return await query.message.edit_text('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω', reply_markup=builder.as_markup())

    client = get_client(account.phone, session_string=account.session)
    if not client.is_connected:
        try:
            await client.connect()
        except RPCError:
            await query.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', show_alert=True)

    await query.message.edit_text(f'<b>–ê–∫–∫–∞—É–Ω—Ç @{account.username} [<code>{account.user_id}</code>]</b>\n'
                                  f'\n'
                                  f'–¢–µ–ª–µ—Ñ–æ–Ω: <code>{account.phone}</code>', reply_markup=builder.as_markup())
